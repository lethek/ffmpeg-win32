variables:
  FFMPEG_VERSION: "4.3.1"
  FFMPEG_PACKAGE_VERSION: "4.3.1.$(Build.BuildId)"

jobs:
- job: windows_cross
  strategy:
    maxParallel: 2
    matrix: 
      x86:
        arch: x86
        targetOs: mingw32
        crossPrefix: i686-w64-mingw32
        rid: win7-x86
        package: w64-i686
      x64:
        arch: x86_64
        targetOs: mingw32
        crossPrefix: x86_64-w64-mingw32
        rid: win7-x64
        package: w64-x86-64
  pool:
    vmImage: ubuntu-16.04
  container:
    image: ubuntu:18.04
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - script: |
      sudo apt-get install -y build-essential gcc-mingw-$(package) g++-mingw-$(package) yasm libunwind8 wget git pkg-config autoconf libtool-bin
    displayName: Install cross-compiler
  - script: |
      git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
      cd nv-codec-headers
      make
      sudo make install
    displayName: Install ffnvcodec
  - script: |
      git clone https://github.com/lu-zero/mfx_dispatch
      cd mfx_dispatch
      autoreconf -fiv
      automake --add-missing
      ./configure \
        --host=$(crossPrefix) \
        --enable-shared \
        --disable-static \
        --prefix=$(Build.ArtifactStagingDirectory)/$(rid)/usr/local/
      make
      make install
    displayName: Install libmfx
  - script: |
      wget -nv -nc http://ffmpeg.org/releases/ffmpeg-$(FFMPEG_VERSION).tar.bz2 -O ffmpeg-$(FFMPEG_VERSION).tar.bz2
      tar xjf ffmpeg-$(FFMPEG_VERSION).tar.bz2
    displayName: Download FFmpeg
  - script: |
      # See https://github.com/FFmpeg/FFmpeg/blob/master/configure for an overview of all configuration
      # options
      PKG_CONFIG_CROSS=$(Build.ArtifactStagingDirectory)/$(rid)/usr/local/lib/pkgconfig
      export PKG_CONFIG_PATH=${PKG_CONFIG_CROSS}:${PKG_CONFIG_PATH}

      ./configure \
       --pkg-config=pkg-config \
       --arch=$(arch) \
       --target-os=$(targetOs) \
       --cross-prefix=$(crossPrefix)- \
       --disable-static \
       --enable-shared \
       --enable-version3 \
       --enable-cuda \
       --enable-cuvid \
       --enable-nvenc \
       --enable-nvdec \
       --enable-dxva2 \
       --enable-libmfx
      make
    workingDirectory: ffmpeg-$(FFMPEG_VERSION)
    displayName: Build FFmpeg
  - script: |
      make DESTDIR=$(Build.ArtifactStagingDirectory)/$(rid) install
    workingDirectory: ffmpeg-$(FFMPEG_VERSION)
    displayName: Install FFmpeg
  - script: |
      libgcc="/usr/lib/gcc/$(crossPrefix)/7.3-posix/libgcc_s_sjlj-1.dll"

      if [ -f "$libgcc" ]; then
        echo "$libgcc exist"
        cp $libgcc $(Build.ArtifactStagingDirectory)/$(rid)/usr/local/bin/
      fi

      libstdc="/usr/lib/gcc/$(crossPrefix)/7.3-posix/libstdc++-6.dll"

      if [ -f "$libstdc" ]; then
        echo "$libstdc exist"
        cp $libstdc $(Build.ArtifactStagingDirectory)/$(rid)/usr/local/bin/
      fi

      libgcc_s_seh="/usr/lib/gcc/$(crossPrefix)/7.3-posix/libgcc_s_seh-1.dll"

      if [ -f "$libgcc_s_seh" ]; then
        echo "$libgcc_s_seh exist"
        cp $libgcc_s_seh $(Build.ArtifactStagingDirectory)/$(rid)/usr/local/bin/
      fi

      cp /usr/$(crossPrefix)/lib/libwinpthread-1.dll $(Build.ArtifactStagingDirectory)/$(rid)/usr/local/bin/
      
    displayName: Copy additional libraries
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: ffmpeg

- job: ubuntu
  pool:
    # This job builds for the linux-x64 RID. This includes hosts running CentOS 7. Because CentOS 7
    # has an old version of glibc, we build on a relatively old version of Ubuntu, which also ships
    # with an older version of glibc.
    vmImage: ubuntu-16.04
  container:
    image: ubuntu:16.04
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  steps:
  - script: |
      /tmp/docker exec -t -u 0 ci-container \
      sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
    displayName: Set up sudo
  - script: |
      sudo apt-get install -y build-essential patchelf gcc g++ yasm libunwind8 wget
    displayName: Set up patchelf, wget, compiler
  - script: |
      wget -nv -nc http://ffmpeg.org/releases/ffmpeg-$(FFMPEG_VERSION).tar.bz2 -O ffmpeg-$(FFMPEG_VERSION).tar.bz2
      tar xjf ffmpeg-$(FFMPEG_VERSION).tar.bz2
    displayName: Download FFmpeg
  - script: |
      # See https://github.com/FFmpeg/FFmpeg/blob/master/configure for an overview of all configuration
      # options
      ./configure --arch=x86_64 --disable-static --enable-shared --enable-version3
      make
    workingDirectory: ffmpeg-$(FFMPEG_VERSION)
    displayName: Build FFmpeg
  - script:
      make DESTDIR=$(Build.ArtifactStagingDirectory)/linux-x64 install
    workingDirectory: ffmpeg-$(FFMPEG_VERSION)
    displayName: Install FFmpeg
  - script: |
      for f in $(Build.ArtifactStagingDirectory)/linux-x64/usr/local/lib/*.so.*; do
        chmod +w $f

        patchelf --set-rpath '${ORIGIN}' $f

        readelf -d $f
      done
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: ffmpeg

- job: macos
  pool:
    # Use 10.14 to avoid the following error:
    # dyld: lazy symbol binding failed: Symbol not found: ____chkstk_darwin
    vmImage: 'macOS-10.14'
  steps:
  - script: |
      brew install yasm
    displayName: Install YASM
  - script: |
      wget -nv -nc http://ffmpeg.org/releases/ffmpeg-$(FFMPEG_VERSION).tar.bz2 -O ffmpeg-$(FFMPEG_VERSION).tar.bz2
      tar xjf ffmpeg-$(FFMPEG_VERSION).tar.bz2
    displayName: Download FFmpeg
  - script: |
      # See https://github.com/FFmpeg/FFmpeg/blob/master/configure for an overview of all configuration
      # options
      ./configure --arch=x86_64 --disable-static --enable-shared --enable-version3
      make
    workingDirectory: ffmpeg-$(FFMPEG_VERSION)
    displayName: Build FFmpeg
  - script: |
      make DESTDIR=$(Build.ArtifactStagingDirectory)/osx-x64 install
    workingDirectory: ffmpeg-$(FFMPEG_VERSION)
    displayName: Install FFmpeg
  - script: |
      cp /usr/local/opt/xz/lib/liblzma.5.dylib $(Build.ArtifactStagingDirectory)/osx-x64/usr/local/lib
    displayName: Copy additional libraries
  - script: |
      out="$(Build.ArtifactStagingDirectory)/osx-x64/usr/local/lib"

      # Patch the dylib dependencies for all .dylib files in the out directory
      for f in "$out/"*.dylib; do
        chmod +w "$f"

        # Skip the first two lines of the otool output, this is just the name of the dylib itself
        dylibs=`otool -L "$f" | tail -n +3 | grep "/usr/local/" | awk -F' ' '{ print $1 }'`

        for dylib in $dylibs; do
          basename=`basename "$dylib"`

          if [ ! -f "$out/$basename" ]; then
              echo "error: The dylib file '$out/$basename' does not exist in the output folder; referenced from $f"
          fi

          # https://www.mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html
          install_name_tool -change "$dylib" "@loader_path/$basename" "$f"
        done;

        otool -L "$f"
      done
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: ffmpeg

- job: nuget
  dependsOn:
  - windows_cross
  - macos
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: ffmpeg
  - script: |
      cd FFmpeg.Native

      # Run dotnet pack with and without a version suffix
      mkdir -p $(Build.ArtifactStagingDirectory)/nuget
      dotnet pack -o $(Build.ArtifactStagingDirectory)/nuget -c Release
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      artifactName: nuget
